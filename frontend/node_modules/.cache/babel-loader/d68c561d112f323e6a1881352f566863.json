{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/oem/projects/hockey-wiz/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/oem/projects/hockey-wiz/frontend/src/pages/schedule/Schedule.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    query team($name: String){\\n        team(name: $name){\\n          name\\n          city\\n          teamRecord{\\n            wins\\n            losses\\n            ot\\n            gamesPlayed\\n            goalsScored\\n            goalsAgainst\\n            streakType\\n            streakLength\\n            points\\n          }\\n          homeGame{\\n            homeTeam{\\n              city\\n              name\\n            }\\n            awayTeam{\\n              city\\n              name\\n            }\\n            date\\n            venue\\n            gamePk\\n            status\\n            finalScoreHome\\n            finalScoreAway\\n            homeTeamStatus\\n            awayTeamStatus\\n          }\\n          awayGame{\\n            homeTeam{\\n              city\\n              name\\n            }\\n            awayTeam{\\n              city\\n              name\\n            }\\n            date\\n            venue\\n            gamePk\\n            status\\n            finalScoreHome\\n            finalScoreAway\\n            homeTeamStatus\\n            awayTeamStatus\\n          }\\n        }\\n    }\\n        \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport BigTeamCard from '../../components/BigTeamCard/BigTeamCard';\nimport ScheduleMonth from '../../components/ScheduleMonth/ScheduleMonth';\nimport { object } from 'prop-types';\n\nfunction Schedule(props) {\n  const GET_TEAM = gql(_templateObject());\n\n  const _useQuery = useQuery(GET_TEAM, {\n    variables: {\n      name: props.match.params.name\n    }\n  }),\n        teamData = _useQuery.data,\n        teamLoading = _useQuery.loading,\n        teamError = _useQuery.error;\n\n  if (teamLoading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Loading\");\n  if (teamError) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Error\");\n  console.log([...teamData.team.awayGame, ...teamData.team.homeGame]);\n  const fixedGames = [...teamData.team.awayGame, ...teamData.team.homeGame];\n  fixedGames.forEach(game => {\n    game.date = new Date(game.date);\n  });\n  fixedGames.sort((a, b) => {\n    return a.date < b.date ? -1 : a.date > b.date ? 1 : 0;\n  });\n  let monthCards = [];\n\n  for (let i = 0; i < 12; i++) {\n    let games_by_month = fixedGames.filter(item => {\n      return item.date.getMonth() === i;\n    });\n    monthCards.push(React.createElement(ScheduleMonth, {\n      games: games_by_month,\n      month: i,\n      team: props.match.params.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }\n\n  ;\n  console.log(fixedGames);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(BigTeamCard, {\n    team: teamData.team,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), monthCards);\n}\n\nexport default Schedule;","map":{"version":3,"sources":["/home/oem/projects/hockey-wiz/frontend/src/pages/schedule/Schedule.js"],"names":["React","useQuery","gql","BigTeamCard","ScheduleMonth","object","Schedule","props","GET_TEAM","variables","name","match","params","teamData","data","teamLoading","loading","teamError","error","console","log","team","awayGame","homeGame","fixedGames","forEach","game","date","Date","sort","a","b","monthCards","i","games_by_month","filter","item","getMonth","push"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,SAASC,MAAT,QAAuB,YAAvB;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,QAAMC,QAAQ,GAAGN,GAAH,mBAAd;;AADqB,oBAwD2CD,QAAQ,CAACO,QAAD,EAAW;AAACC,IAAAA,SAAS,EAAE;AAACC,MAAAA,IAAI,EAAEH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBF;AAA1B;AAAZ,GAAX,CAxDnD;AAAA,QAwDRG,QAxDQ,aAwDbC,IAxDa;AAAA,QAwDUC,WAxDV,aAwDEC,OAxDF;AAAA,QAwD6BC,SAxD7B,aAwDuBC,KAxDvB;;AAyDrB,MAAIH,WAAJ,EAAiB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACjB,MAAIE,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACfE,EAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGP,QAAQ,CAACQ,IAAT,CAAcC,QAAlB,EAA4B,GAAGT,QAAQ,CAACQ,IAAT,CAAcE,QAA7C,CAAZ;AACA,QAAMC,UAAU,GAAG,CAAC,GAAGX,QAAQ,CAACQ,IAAT,CAAcC,QAAlB,EAA4B,GAAGT,QAAQ,CAACQ,IAAT,CAAcE,QAA7C,CAAnB;AACAC,EAAAA,UAAU,CAACC,OAAX,CAAmBC,IAAI,IAAG;AACtBA,IAAAA,IAAI,CAACC,IAAL,GAAY,IAAIC,IAAJ,CAASF,IAAI,CAACC,IAAd,CAAZ;AACH,GAFD;AAGAH,EAAAA,UAAU,CAACK,IAAX,CAAgB,CAACC,CAAD,EAAGC,CAAH,KAAO;AACnB,WAAOD,CAAC,CAACH,IAAF,GAAOI,CAAC,CAACJ,IAAT,GAAgB,CAAC,CAAjB,GAAqBG,CAAC,CAACH,IAAF,GAAOI,CAAC,CAACJ,IAAT,GAAgB,CAAhB,GAAoB,CAAhD;AACH,GAFD;AAGA,MAAIK,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAIC,cAAc,GAAGV,UAAU,CAACW,MAAX,CAAmBC,IAAD,IAAS;AAC5C,aAAQA,IAAI,CAACT,IAAL,CAAUU,QAAV,OAAuBJ,CAA/B;AACH,KAFoB,CAArB;AAGAD,IAAAA,UAAU,CAACM,IAAX,CAAgB,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEJ,cAAtB;AAAsC,MAAA,KAAK,EAAED,CAA7C;AAAgD,MAAA,IAAI,EAAE1B,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBF,IAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB;AAEH;;AAAA;AAEDS,EAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEX,QAAQ,CAACQ,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKW,UAFL,CADJ;AAMH;;AAED,eAAe1B,QAAf","sourcesContent":["import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport BigTeamCard from '../../components/BigTeamCard/BigTeamCard'\nimport ScheduleMonth from '../../components/ScheduleMonth/ScheduleMonth'\nimport { object } from 'prop-types';\nfunction Schedule(props) {\n    const GET_TEAM = gql`\n    query team($name: String){\n        team(name: $name){\n          name\n          city\n          teamRecord{\n            wins\n            losses\n            ot\n            gamesPlayed\n            goalsScored\n            goalsAgainst\n            streakType\n            streakLength\n            points\n          }\n          homeGame{\n            homeTeam{\n              city\n              name\n            }\n            awayTeam{\n              city\n              name\n            }\n            date\n            venue\n            gamePk\n            status\n            finalScoreHome\n            finalScoreAway\n            homeTeamStatus\n            awayTeamStatus\n          }\n          awayGame{\n            homeTeam{\n              city\n              name\n            }\n            awayTeam{\n              city\n              name\n            }\n            date\n            venue\n            gamePk\n            status\n            finalScoreHome\n            finalScoreAway\n            homeTeamStatus\n            awayTeamStatus\n          }\n        }\n    }\n        `     \n    const { data:teamData, loading:teamLoading, error:teamError } = useQuery(GET_TEAM, {variables: {name: props.match.params.name}});\n    if (teamLoading) return <div>Loading</div>\n    if (teamError) return <div>Error</div>\n    console.log([...teamData.team.awayGame, ...teamData.team.homeGame])\n    const fixedGames = [...teamData.team.awayGame, ...teamData.team.homeGame]\n    fixedGames.forEach(game =>{\n        game.date = new Date(game.date)\n    })\n    fixedGames.sort((a,b)=>{\n        return a.date<b.date ? -1 : a.date>b.date ? 1 : 0;\n    })\n    let monthCards = []\n    for (let i = 0; i < 12; i++) {\n        let games_by_month = fixedGames.filter((item) =>{\n            return (item.date.getMonth()===i)\n        })\n        monthCards.push(<ScheduleMonth games={games_by_month} month={i} team={props.match.params.name}/>)\n        \n    };\n\n    console.log(fixedGames)\n    \n    return (\n        <div>\n            <BigTeamCard team={teamData.team}></BigTeamCard>\n            {monthCards}\n        </div>\n    )\n}\n\nexport default Schedule\n"]},"metadata":{},"sourceType":"module"}