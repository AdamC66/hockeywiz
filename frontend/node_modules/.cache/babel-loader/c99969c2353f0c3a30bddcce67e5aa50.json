{"ast":null,"code":"import _slicedToArray from \"/home/oem/projects/hockey-wiz/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/oem/projects/hockey-wiz/frontend/src/components/Calendar/Calendar.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport moment from 'moment';\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: \"80%\",\n    margin: '0 auto',\n    background: 'black'\n  },\n  cardHeader: {\n    background: 'blue',\n    color: 'white',\n    textAlign: 'center'\n  },\n  calendar: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(7, 1fr)',\n    gridTemplateRows: 'repeat(4, 6em)',\n    gridGap: '2px',\n    width: '100%',\n    height: '6em'\n  },\n  days: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(7, 1fr)',\n    backgroundColor: 'white',\n    textAlign: 'center'\n  }\n}));\nexport default function RecipeReviewCard() {\n  const classes = useStyles();\n\n  const _useState = useState('October'),\n        _useState2 = _slicedToArray(_useState, 2),\n        month = _useState2[0],\n        setMonth = _useState2[1];\n\n  const _useState3 = useState(moment()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        dateObject = _useState4[0],\n        setDateObject = _useState4[1];\n\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  let daycards = [];\n  days.forEach((day, index) => {\n    daycards.push(React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \" \", day, \" \"));\n  });\n\n  const firstDayOfMonth = () => {\n    let firstDay = moment(dateObject).startOf(\"month\").format(\"d\");\n    return firstDay;\n  };\n\n  let blanks = [];\n\n  for (let i = 0; i < firstDayOfMonth(); i++) {\n    blanks.push(React.createElement(\"div\", {\n      className: \"calendar-day empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"\"));\n  }\n\n  let daysInMonth = [];\n\n  for (let d = 1; d <= daysInMonth; d++) {\n    daysInMonth.push(React.createElement(\"div\", {\n      key: d,\n      className: \"calendar-day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, d));\n  }\n\n  var totalSlots = [...blanks, ...daysInMonth];\n  let rows = [];\n  let cells = [];\n  totalSlots.forEach((row, i) => {\n    if (i % 7 !== 0) {\n      cells.push(row); // if index not equal 7 that means not go to next week\n    } else {\n      rows.push(cells); // when reach next week we contain all td in last week to rows \n\n      cells = []; // empty container \n\n      cells.push(row); // in current loop we still push current row to new container\n    }\n\n    if (i === totalSlots.length - 1) {\n      // when end loop we add remain date\n      rows.push(cells);\n    }\n  });\n  let dates = rows.map((d, i) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, d);\n  });\n  return React.createElement(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    className: classes.cardHeader,\n    title: \"October\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.days,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, daycards), React.createElement(CardContent, {\n    className: classes.calendar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, dates));\n}","map":{"version":3,"sources":["/home/oem/projects/hockey-wiz/frontend/src/components/Calendar/Calendar.js"],"names":["React","useState","makeStyles","Card","CardHeader","CardContent","moment","useStyles","theme","card","maxWidth","margin","background","cardHeader","color","textAlign","calendar","display","gridTemplateColumns","gridTemplateRows","gridGap","width","height","days","backgroundColor","RecipeReviewCard","classes","month","setMonth","dateObject","setDateObject","daycards","forEach","day","index","push","firstDayOfMonth","firstDay","startOf","format","blanks","i","daysInMonth","d","totalSlots","rows","cells","row","length","dates","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport moment from 'moment'\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: \"80%\",\n    margin: '0 auto',\n    background: 'black',\n  },\n  cardHeader:{\n    background: 'blue',\n    color: 'white',\n    textAlign: 'center',\n  },\n  calendar:{\n    display: 'grid',\n    gridTemplateColumns: 'repeat(7, 1fr)',\n    gridTemplateRows: 'repeat(4, 6em)',\n    gridGap: '2px',\n    width: '100%',\n    height: '6em',\n  },\n  days:{\n      display: 'grid',\n      gridTemplateColumns: 'repeat(7, 1fr)',\n      backgroundColor: 'white',\n      textAlign: 'center',\n  }\n\n}));\n\nexport default function RecipeReviewCard() {\n    const classes = useStyles();\n    const [month, setMonth] = useState('October')\n    const [dateObject, setDateObject] = useState(moment())\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    let daycards = []\n    days.forEach((day,index) => {\n        daycards.push(<div key={index}> {day} </div>)\n    });\n    const firstDayOfMonth = () => {\n        let firstDay = moment(dateObject)\n                     .startOf(\"month\")\n                     .format(\"d\"); \n       return firstDay;\n    };\n    let blanks = [];\n    for (let i = 0; i < firstDayOfMonth(); i++) {\n      blanks.push(\n        <div className=\"calendar-day empty\">{\"\"}</div>\n      );\n    }\n    let daysInMonth = [];\n    for (let d = 1; d <= daysInMonth; d++) {\n      daysInMonth.push(\n        <div key={d} className=\"calendar-day\">\n          {d}\n        </div>\n      );\n    }\n    var totalSlots = [...blanks, ...daysInMonth];\n    let rows = [];\n    let cells = [];\n    totalSlots.forEach((row, i) => {\n        if (i % 7 !== 0) {\n          cells.push(row); // if index not equal 7 that means not go to next week\n        } else {\n          rows.push(cells); // when reach next week we contain all td in last week to rows \n          cells = []; // empty container \n          cells.push(row); // in current loop we still push current row to new container\n        }\n        if (i === totalSlots.length - 1) { // when end loop we add remain date\n          rows.push(cells);\n        }\n      });\n    let dates = rows.map((d, i) => {\n        return <tr>{d}</tr>;\n      });\n    return (\n        <Card className={classes.card}>\n        <CardHeader\n            className={classes.cardHeader}\n            title=\"October\"\n        />\n        <CardContent className={classes.days}>\n            {daycards}\n        </CardContent>\n        <CardContent className={classes.calendar}>\n            {dates}\n            </CardContent>\n        </Card>\n    );\n}"]},"metadata":{},"sourceType":"module"}