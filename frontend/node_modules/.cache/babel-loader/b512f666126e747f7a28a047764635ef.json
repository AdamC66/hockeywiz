{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/oem/projects/hockey-wiz/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/home/oem/projects/hockey-wiz/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/oem/projects/hockey-wiz/frontend/src/pages/teams/Teams.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n      query {\\n        allTeamRecords {\\n          team {\\n            name\\n            city\\n            nhlApiId\\n            division\\n          }\\n          wins\\n          losses\\n          ot\\n          gamesPlayed\\n          goalsScored\\n          goalsAgainst\\n          streakLength\\n          streakType\\n          points\\n        }\\n      }\\n      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport main_url from '../../config';\nimport StandingsTabs from '../../components/StandingsTabs/StandingsTabs';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nfunction Teams() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        teams = _useState2[0],\n        setTeams = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await main_url.get('/teams/api/standings').then(res => setTeams(res.data));\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, []);\n  const GET_STANDINGS = gql(_templateObject());\n\n  const _useQuery = useQuery(GET_STANDINGS),\n        data = _useQuery.data,\n        loading = _useQuery.loading,\n        error = _useQuery.error;\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Loading\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Error\");\n  return React.createElement(\"div\", {\n    className: \"Teams\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, isLoading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Loading\") : React.createElement(StandingsTabs, {\n    teams: data.allTeamRecords,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}\n\nexport default Teams;","map":{"version":3,"sources":["/home/oem/projects/hockey-wiz/frontend/src/pages/teams/Teams.js"],"names":["React","useEffect","useState","main_url","StandingsTabs","useQuery","gql","Teams","teams","setTeams","isLoading","setIsLoading","fetchData","res","get","then","data","GET_STANDINGS","loading","error","allTeamRecords"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,SAASC,KAAT,GAAiB;AAAA,oBACaL,QAAQ,CAAC,EAAD,CADrB;AAAA;AAAA,QACNM,KADM;AAAA,QACCC,QADD;;AAAA,qBAEqBP,QAAQ,CAAC,IAAD,CAF7B;AAAA;AAAA,QAENQ,SAFM;AAAA,QAEKC,YAFL;;AAIbV,EAAAA,SAAS,CAAC,MAAK;AACb,mBAAeW,SAAf,GAA0B;AACxB,YAAMC,GAAG,GAAG,MAAMV,QAAQ,CAACW,GAAT,CAAa,sBAAb,EACjBC,IADiB,CACZF,GAAG,IAAGJ,QAAQ,CAACI,GAAG,CAACG,IAAL,CADF,CAAlB;AAEAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AACDC,IAAAA,SAAS;AACV,GAPQ,EAOP,EAPO,CAAT;AASE,QAAMK,aAAa,GAAGX,GAAH,mBAAnB;;AAbW,oBAkCsBD,QAAQ,CAACY,aAAD,CAlC9B;AAAA,QAkCHD,IAlCG,aAkCHA,IAlCG;AAAA,QAkCGE,OAlCH,aAkCGA,OAlCH;AAAA,QAkCYC,KAlCZ,aAkCYA,KAlCZ;;AAmCX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAEb,SACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIT,SAAS,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,GAAwB,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEM,IAAI,CAACI,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADrC,CADF;AAKD;;AAED,eAAeb,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport main_url from '../../config'\nimport StandingsTabs from '../../components/StandingsTabs/StandingsTabs'\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nfunction Teams() {\n    const [teams, setTeams] = useState([])\n    const [isLoading, setIsLoading] = useState(true);\n  \n    useEffect(() =>{\n      async function fetchData(){\n        const res = await main_url.get('/teams/api/standings')\n        .then(res=> setTeams(res.data))\n        setIsLoading(false)\n      }\n      fetchData()\n    },[])\n\n      const GET_STANDINGS = gql`\n      query {\n        allTeamRecords {\n          team {\n            name\n            city\n            nhlApiId\n            division\n          }\n          wins\n          losses\n          ot\n          gamesPlayed\n          goalsScored\n          goalsAgainst\n          streakLength\n          streakType\n          points\n        }\n      }\n      `\n      const { data, loading, error } = useQuery(GET_STANDINGS);\n      if (loading) return <div>Loading</div>\n      if (error) return <div>Error</div>  \n  \n    return (\n      <div className=\"Teams\">     \n        { isLoading ? <div>Loading</div> : <StandingsTabs teams={data.allTeamRecords}/>}\n      </div>\n    );\n  }\n  \n  export default Teams;"]},"metadata":{},"sourceType":"module"}